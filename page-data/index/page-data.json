{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"7dc23d5b-2aff-5670-b308-29c625f5d170","excerpt":"어느 덧 2020년이 끝나가고 있습니다. 올해는 정말 많은 일이 있었던 것 같은데요. 힘들고 지치는 일도 많았지만 그만큼 성장한 한 해를 보내지 않았나 생각이 듭니다. 올해가 가기 전에 있었던 일들을 기록하고 반성해보면서 더 나은 새해를 맞이해보려 합니다. 🙂 😷 2020 이모저모 2020년 올해는 3월부터 유행하기 시작한 코로나19 바이러스로 일상이 송두리째 바뀐 년도였죠. 마스크는 없으면 허전할 정도로 일상이 되었고, 많은 분이 일하는 데 있어서 어려움을 겪고 있는 지금입니다. 하지만 각자의 자리에서 책임감을 가지고 노력해주신 덕분에 한국은 다른 나라에 비해 (여전히 많지만) 적은 감염이 일어나지 않았나 생각이 듭니다. 코로나 때문에 약 2개월을 집에서 보내고 취업을 일찍한 탓에 마지막 고등학교 3학년 생활을 겨우 2~3개월밖에 하지 못해서 올해 학교에서 있었던 일을 생각했을 때, 특별하게 많이 생각나는 게 없는 것 같아 아쉬움이 남는 것 같습니다. ⛅ 지난 해 목표 작년 회고…","frontmatter":{"categories":"Life","title":"책임감을 일깨워준 2020","date":"December 31, 2020"},"fields":{"slug":"/책임감을-일깨워준-2020/"}}},{"node":{"id":"a6d72564-877a-5d6e-bc18-9b7eea329506","excerpt":"자바스크립트를 통해 개발하다보면 가끔보게 되는 키워드가 있는 데, 바로 라는 녀셕입니다. “this? 대충 이렇게 작동하는 녀석아닌가??” 하고 지나칠 수 있지만, 정확히 알고 적절하게 활용한다면 더욱 깔끔하고 디버깅이 편한 코드를 작성할 수 있을 것입니다. 일단 this를 찍어보자 키를 눌러 console에서 를 한번 찍어봅시다. 그러면 아래와 같은 값이 나올 것 입니다. 네, Window 객체가 나옵니다. Window 객체는 일반적으로 브라우저의 요소와 자바스크립트 엔진과 관련된 모든 정보를 포함하고 있는 객체입니다. 하지만 단순히  =  라면, 이 글을 쓰지 않았겠죠? 문법에 따라 this가 바뀐다? 전에 커뮤니티에 이런 글이 하나 올라왔었습니다. Q .  과  (화살표 함수)의 차이점이 무엇인가요? A : “this가 달라요”\r\nB : “function은 this를 가지고, 화살표함수는 this를 가지지 않아요” 틀린 답변은 아니지만, 정확히 어떻게 가 다르다는 걸까요? 입…","frontmatter":{"categories":"JavaScript","title":"어중간히 알면 안되는 JS 개념 1. this","date":"August 31, 2020"},"fields":{"slug":"/researching-js-1-this/"}}},{"node":{"id":"73223a03-29d6-5642-96ab-a57be87c1c6f","excerpt":"Dependency Injection, 객체지향 프로그래밍을 하다보면 한번 쯤 듣게 되는 용어중 하나인데요. 이번 글에서는 의존성 주입이 무엇이고 어떤 배경으로 생겨난 개념인지, 왜 필요한지에 대해 간단히 정리해보려고 합니다. 문제점 개발을 하다보면 코드에 의존성이 생기기 마련입니다. 그럼 의존성은 무엇이고, 왜 생겨나는 걸까요? 아래의 코드를 봐주세요. 위 코드와 같이  클래스에서  함수가 호출되기 위해서는  클래스를 필요로 합니다. 이것을 Programmer 클래스는 Coffee 클래스의 의존성을 가진다 라고 합니다. 이와 같이 코드를 설계하였을 때, 코드의 재활용성이 떨어지고, 위 예제에서  클래스가 수정 되었을 때,  클래스도 함께 수정해줘야하는 문제가 발생합니다. 즉, 결합도(coupling)가 높아지게 됩니다. DI(의존성 주입)를 해야 하는 이유 DI로 프로그램을 설계 했을 때, 다음과 같은 이점을 얻을 수 있습니다. Unit Test가 용이해진다. 코드의 재활용성을 …","frontmatter":{"categories":"Web","title":"Dependency Injection이란 무엇일까?","date":"February 25, 2020"},"fields":{"slug":"/Dependency-Injection이란-무엇일까/"}}},{"node":{"id":"b0207571-53f4-5ee5-b8b7-d9004be86586","excerpt":"2019년 한 해가 얼마 남지 않았군요. 12월 달이 되기 전에 미리 써야지 하다가 진짜 12월 마지막 날이 되서 쓰게 되네요…😅 그래서 2019년이 가기전에, 2019년을 반성하고 되돌아 보면서 올해보다 멋진 2020년을 준비해보려고 합니다. 📆 2019 이모저모 2019년에는 딱 두 가지 목표가 있었는 데, 첫째는 제가 들어간 팀의 코드를 마스터(?)하는 것이었고, 두 번째로는 아무 서비스나 한가지라도 실사용해보는 것이었습니다. 목표는 제가 성장할 수 있도록 도와줬지만 반대로 성장을 막기도 했던 것 같아요. 첫 번째 목표는 반 년만에 달성했었습니다. 정확히는 제가 생각하기에 마스터했다고 착각한 것이었죠. 이것을 깨닫지 못하고 달성했다고 생각했을 때, 성장이 멈추는 느낌을 받았습니다. 그래도 아주 늦게 깨닫지는 않아서 현재 더 좋고 효율적인 코드를 쓰기 위해 노력하고 있습니다. 두 번째 목표는 달성하지 못한 목표입니다. 개인적으로 프로젝트를 할 시간을 만들지 못한 탓도 있고, 중…","frontmatter":{"categories":"Life","title":"함께하는 의미를 알려준 2019","date":"December 31, 2019"},"fields":{"slug":"/함께하는-의미를-알려준-2019/"}}},{"node":{"id":"1053893c-46e4-5b0a-9742-618d22624cc6","excerpt":"학교에 고등학생 개발자를 채용하기 위해 기업설명회가 열렸었는데, 지원하고 싶은 3학년 학생과 2학년 학생들을 대상으로 채용 면접이 진행되었습니다. 성장하는 스타트업 회사이고, 떨어져도 좋은 경험이 될 수 있을 것 같아 웹 프론트 개발에 지원하여 면접을 진행하였습니다. 난생처음 보는 기술면접에서 한 50%정도만 정확히 이야기 한 것 같았는 데, 면접을 통해 개발을 할 줄 아는 것도 중요하지만 개발에 필요한 이론을 습득하는 것도 꽤나 중요한 것 임을 알게 되는 계기가 되었던 것 같습니다. 이 글에서는 면접의 질문 내용 중에 웹 개발에 있어서 꽤나 중요했던 질문들이 있어서 정리해보려고 합니다. 1. 웹 표준이란? 웹 표준이란 www(World Wide Web) 의 측면을 서술하고\r\n정의하는 공식 표준이나 다른 기술 규격을 가리키는 일반적인 용어이다 보통 웹 개발과 디자인에 관계되어 표준이 되는 규칙등을 말한다.\r\n이러한 규칙들은 W3C 에서 표준을 정의하고 발표(?)한다. HTML : …","frontmatter":{"categories":"Web","title":"나의 첫 인터뷰 질문 리스트","date":"December 22, 2019"},"fields":{"slug":"/나의-첫-인터뷰-질문-리스트/"}}},{"node":{"id":"a0839e1c-8fe6-5f85-9dbe-291a62f7e951","excerpt":"2021/05/17 업데이트 ⚠️ Notice ⚠️ 해당 포스트는 Storybook 5버전을 기준으로 작성된 포스트입니다. 최신 버전에 대한 튜토리얼은 스토리북 문서를 찾아보시는 걸 추천드립니다.  이번 포스트에서는 Storybook 이라는 것을 알아볼까 합니다. Storybook은 UI 구성 요소(컴포넌트)를 개발하기위한 오픈 소스 도구입니다. 예전에는 페이지 단위의 개발을 하였다면 요즘에는 컴포넌트 단위로 프론트엔드를 개발하고, 많은 분들이 React, Vue나 Angular를 이용하여 개발합니다. 여기서 컴포넌트는 외부에 영향을 받지 않고 독립적인 개체를 이루며 재사용가능한 단위라고 할 수 있습니다. 이러한 특성을 잘 지켜가며 컴포넌트를 개발할 수 있도록 도와주는 오픈 소스 라이브러리가 바로 Storybook입니다. 🤔 문제점 저와 같은 경우에는 보통 React.js를 이용하여 프론트 개발을 합니다. 하지만 항상 컴포넌트를 설계할 때, 필요한게 생길 때마다 해당 케이스에 맞게 컴…","frontmatter":{"categories":"React","title":"Storybook 작성하기","date":"November 14, 2019"},"fields":{"slug":"/Storybook-작성하기/"}}},{"node":{"id":"d501de25-57ab-5fe4-873a-61b34c759c5d","excerpt":"Typescript를 배우면서 중요한 내용을 정리한 글입니다. 이전부터 타입스크립트의 장점과 필요성을 알고는 있었지만 Typescript를 쓰지 않고도 개발을 잘 해왔기 때문에 사용을 꺼려왔었습니다. 그리고 평소처럼 React로 javascript만을 이용하여 웹 어플리케이션 개발을 하던 도중\r\n(대충 Props로 값을 넘겨줄 때, 타입정의를 하지 않아 버그가 발생했다는 내용…) props-type을 정의 하지 않는 이유도 있지만 개발하면서 일일히 props-type을 정의 하는 것은 꽤나 번거러운 일입니다. 그래서 이번 기회에 Typescript를 사용해보자고 마음먹게 되었습니다…ㅎㅎ 왜 타입스크립트 인가? 타입스크립트는 타입이 있는 자바스크립트란 단어는 보다 정확히는 정적 타입 시스템(static type system)을 도입한 자바스크립트라는 뜻입니다. 또한 JS는 인터프린터 이지만 TS는 컴파일을 통해 타입을 체크하여 오류검출 등을 하여 정적 타입을 이용하여 코딩을 할 수 …","frontmatter":{"categories":"Web","title":"How to use TypeScript","date":"October 28, 2019"},"fields":{"slug":"/How-to-use-TypeScript/"}}},{"node":{"id":"e6888262-2ac3-5414-8221-5c81f52d266f","excerpt":"과거에는 브라우저가 웹서버에 웹페이지를 요청하여 클라이언트를 제공하여 웹페이지가 작동하였습니다. 하지만 최근에는 SPA(Signle-Page-Application)를 이용하여 클라이언트(대표적으로 React, Vue, Angular)를 구현하며, 클라이언트를 서버와 분리하여 클라이언트 로직을 분명히 합니다. 또한 서버에 API를 요청하므로써 웹 어플리케이션을 개발합니다. REST API가 무엇인가? REST API에 REST는 Representational State Transfer의 약자로 소프트웨어 프로그램 아키텍처의 한 형식입니다. REST api의 등장은 2000년도에 HTTP의 주요 저자 중 한 사람인 로이 필딩이 그 당시 웹(HTTP) 설계의 우수성에 비해 제대로 사용되어지지 못하는 모습에 안타까워하며 웹의 장점을 최대한 활용할 수 있는 아키텍처로써 REST를 발표 하였습니다. REST 구성 REST API는 다음의 구성으로 이루어져있습니다. 자원 (Resource) -…","frontmatter":{"categories":"Web","title":"REST API 란","date":"October 28, 2019"},"fields":{"slug":"/HTTP-REST-API-란/"}}},{"node":{"id":"85ca9fa0-858f-58b1-974a-7eb9e1886ecb","excerpt":"오늘 써볼 글은 React의 상태관리를 할 때 많이 사용하는 라이브러리인 Mobx의 데코레이터를 CRA에서  없이 사용하는 법을 알아보겠습니다 :) 보통은 Mobx 말고도 데코레이터를 사용할 수 있습니다. 하지만 Mobx를 사용하면서 데코레이터를 많이 사용하고 react에서 데코레이터를 사용할 때 여러가지 설정에 관한 문제를 겪었기 때문에 이를 해결하고자 하는 글을 써봅니다. 🤔 eject 란? 기본적으로 CRA로 만든 프로젝트에서 를 하면 숨겨져 있던 웹팩, 바벨 등의 설정을 보여주고 이것을 커스터마이징 할 수 있도록 해주는 명령어입니다. 주의 : 한번 eject를 하면 이전 상태로 돌아갈 수 없습니다. 🚫 eject를 했을 때 생길 수 있는 문제 하지만 eject를 했을 때 다음과 같은 문제 아닌 문제가 발생합니다. CRA의 웹팩, 바벨과 같은 모든 configuration를 직접 관리해줘야 한다.\r\n(익숙하지 않다면 관리하는 것이 까다롭다) One Build Dependenc…","frontmatter":{"categories":"React","title":"React - eject 없이 Mobx 데코레이터 사용하기","date":"October 27, 2019"},"fields":{"slug":"/Mobx-데코레이터-yarn-eject-없이-사용하기/"}}},{"node":{"id":"0df66811-e817-51fa-a140-0fe018ec690b","excerpt":"도커란 간단하게 말해 서버환경에서의 다양한 프로그램, 실행환경을 컨테이너라는 격리된 환경에서 실행할 수 있게 해주는 컨테이너 기반의 오픈소스 가상화 플랫폼 입니다. 이를 이용하면 복잡한 서버환경을 코드로 쉽게 관리할 수 있고 안정적인 배포환경 (무중단 배포 등) 구성할 수 있습니다. 그래서 이번 글에서는 도커에서 이미지를 받고 컨테이너를 생성하고 삭제 할 때, 자주쓰는 기본 명령어를 알아보려 합니다 :) docker 설치 리눅스 자동 설치 스크립트 우분투 윈도우, 맥 Docker for windows, Docker for Mac 설치 📜 이미지 관련 도커에서는 도커 이미지를 이용하여 컨테이너를 생성할 수 있는데, 도커 이미지를 이용하면 이미지에 설정해둔 대로 컨테이너의 구성환경을 적용할 수 있습니다. 이미지 목록 보기 이미지 검색 이미지 받기 버전: latest 를 쓰면 최신 버전으로 받을수 있다. 이미지 삭제 컨테이너를 삭제하기 전에 이미지를 삭제 할때, -f 옵션을 붙어면 컨테…","frontmatter":{"categories":"Docker","title":"Docker 도커 - 1. 기본 명령어 모음","date":"September 24, 2019"},"fields":{"slug":"/docker-1-기본명령어/"}}},{"node":{"id":"f5fc09f2-87c9-5b83-af04-3ad744acb956","excerpt":"이 포스트에서는 CORS에 대한 이슈에 대해서 다뤄볼려고 합니다. 웹 개발을 하다보면 한번쯤 겪게되는 이슈로 클라이언트와 서버의 오리진이 다를 때 발생하는 이슈입니다. 🤔 CORS? 크로스 도메인? CORS는 Cross Origin Resource Sharing의 약자로 도메인 또는 포트가 다른 서버의 자원을 요청하는 매커니즘을 말합니다. 이때 요청을 할때는 cross-origin HTTP 에 의해 요청됩니다. 하지만 동일 출처 정책(same-origin policy) 때문에 CORS 같은 상황이 발생 하면 외부서버에 요청한 데이터를 브라우저에서 보안목적으로 차단합니다. 그로 인해 정상적으로 데이터를 받을 수 없습니다.\r\n 동일 출처 정책(same-origin policy)\r\n불러온문서나 스크립트가 다른 출처에서 가져온 리소스와 상호작용하는 것을 제한하는 중요한 보안 방식입니다. 이것은 잠재적 악성 문서를 격리하여, 공격 경로를 줄이는데 도움이 됩니다. — MDN web docs …","frontmatter":{"categories":"Web","title":"CORS에 대한 간단한 고찰","date":"September 23, 2019"},"fields":{"slug":"/cors에-대한-간단한-고찰/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"이진영","bio":{"role":"개발자","description":["새로움을 발굴하는","능동적으로 일하는"],"thumbnail":""},"social":{"github":"https://github.com/wlsdud2194","linkedIn":"https://www.linkedin.com/in/wlsdud2194","email":"wlsdud2194@gmail.com"}}}}},"pageContext":{}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437","3350743975"]}